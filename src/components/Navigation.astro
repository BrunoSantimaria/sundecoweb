---
const menuItems = [
  { name: "Inicio", href: "/" },
  { name: "Cortinas", href: "/cortinas" },
  { name: "Redes", href: "/redes" },
  { name: "Cercos", href: "/cercos" },
  { name: "Toldos", href: "/toldos" },
  { name: "Contacto", href: "/contacto" },
];

// Obtener la ruta actual
const currentPath = Astro.url.pathname;
---

<nav class="navbar">
  <div class="container">
    <div class="nav-wrapper">
      <a href="/" class="logo">
        <img
          src="https://res.cloudinary.com/di92lsbym/image/upload/f_auto,q_auto/v1736404361/Sundeco/Logo-Sundeco-Minimal.webp"
          alt="Sundeco Logo"
          width="60"
          height="60"
        />
      </a>

      <button class="mobile-nav-toggle" aria-controls="primary-navigation" aria-expanded="false">
        <span class="sr-only">Menú</span>
        <div class="hamburger">
          <span></span>
          <span></span>
          <span></span>
        </div>
      </button>

      <div class="primary-navigation" id="primary-navigation">
        {menuItems.map((item) => (
          <a 
            href={item.href} 
            class:list={[
              'nav-link',
              { active: currentPath === item.href || (item.href !== '/' && currentPath.startsWith(item.href)) }
            ]}
          >
            {item.name}
          </a>
        ))}
      </div>
    </div>
  </div>
</nav>

<style>
  .navbar {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    z-index: 50;
    background: rgba(17, 24, 39, 0.8);
    backdrop-filter: blur(8px);
    transition: all 0.3s ease;
  }

  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 1rem;
  }

  .nav-wrapper {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem 0;
  }

  .primary-navigation {
    display: flex;
    gap: 0.5rem;
  }

  .nav-link {
    color: rgb(229, 231, 235);
    padding: 0.5rem 1rem;
    border-radius: 0.375rem;
    font-size: 0.875rem;
    font-weight: 500;
    transition: all 0.2s ease;
  }

  .nav-link:hover {
    background-color: rgb(31, 41, 55);
    color: white;
  }

  .mobile-nav-toggle {
    display: none;
  }

  .hamburger {
    display: flex;
    flex-direction: column;
    gap: 6px;
  }

  .hamburger span {
    display: block;
    width: 24px;
    height: 2px;
    background-color: white;
    transition: all 0.3s ease;
  }

  @media (max-width: 768px) {
    .mobile-nav-toggle {
      display: block;
      background: none;
      border: none;
      padding: 0.5rem;
      cursor: pointer;
    }

    .primary-navigation {
      display: none;
      position: absolute;
      top: 100%;
      left: 0;
      right: 0;
      background-color: rgb(17, 24, 39);
      padding: 1rem 0;
      flex-direction: column;
    }

    .primary-navigation.active {
      display: flex;
    }

    .nav-link {
      padding: 0.75rem 1rem;
      display: block;
      width: 100%;
    }

    /* Animación del hamburger */
    .mobile-nav-toggle[aria-expanded="true"] .hamburger span:nth-child(1) {
      transform: translateY(8px) rotate(45deg);
    }

    .mobile-nav-toggle[aria-expanded="true"] .hamburger span:nth-child(2) {
      opacity: 0;
    }

    .mobile-nav-toggle[aria-expanded="true"] .hamburger span:nth-child(3) {
      transform: translateY(-8px) rotate(-45deg);
    }
  }

  .nav-link.active {
    background-color: rgb(31, 41, 55);
    color: white;
  }
</style>

<script>
  // Este script se ejecutará en el cliente
  document.addEventListener('DOMContentLoaded', () => {
    const navToggle = document.querySelector('.mobile-nav-toggle');
    const primaryNav = document.querySelector('.primary-navigation');
    
    navToggle?.addEventListener('click', () => {
      const isExpanded = navToggle.getAttribute('aria-expanded') === 'true';
      navToggle.setAttribute('aria-expanded', !isExpanded);
      primaryNav?.classList.toggle('active');
    });

    // Opcional: Cerrar menú al hacer click en un enlace
    const navLinks = document.querySelectorAll('.nav-link');
    navLinks.forEach(link => {
      link.addEventListener('click', () => {
        navToggle?.setAttribute('aria-expanded', 'false');
        primaryNav?.classList.remove('active');
      });
    });
  });
</script>